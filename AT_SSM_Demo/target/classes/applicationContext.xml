<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 开启spring注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架去管理 -->
    <context:component-scan base-package="com.at">
        <!-- 配置要忽略的注解 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	
    <!-- 开启mybatis扫描dao层 -->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.at.dao"/>
    </bean>
	
    <!-- 配置C3P0的连接池对象 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql:///mybatis_sql"/>
        <property name="username" value="root"/>
        <property name="password" value="81192"/>
    </bean>
	
    <!-- 配置SqlSession的工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="dataSourceTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入 DataSource -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- spring事务声明式-通知的配置 -->
    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <!--在 tx:advice 标签内部 配置事务的属性 -->
        <tx:attributes>
            <!-- 指定方法名称：是业务核心方法
            read-only：指定是否是只读事务
                默认 false，读写
                只有查询方法才能设置为True
            isolation：指定事务的隔离级别
                默认值是DEFAULT,使用数据库的默认隔离级别
            propagation：指定事务的传播行为
                默认值是REQUIRED,表示一定会有事务，增删改的选择
                查询方法可以选择SUPPORTS
            timeout：指定超时时间
                默认值为：-1。永不超时。
                如果指定了数值，以秒为单位
            rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。没有默认值，任何异常都回滚。
            no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，任何异常都回滚。
            -->
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切入点表达式&&建立切入点表达式和事务通知的对应关系 -->
        <aop:advisor pointcut="execution(* com.at.service.impl.*ServiceImpl.*(..))" advice-ref="txAdvice"/>
    </aop:config>
</beans>
</beans>